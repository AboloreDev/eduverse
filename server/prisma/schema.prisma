// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

enum CourseLevel {
  Beginner
  Intermediate
  Advanced
}

enum CourseStatus {
  Draft
  Published
  Archived
}

enum EnrollmentStatus {
  Pending
  Active 
  Rejected
}
model User {
  id                        String     @id @default(uuid())
  email                     String     @unique
  firstName                 String
  lastName                  String
  password                  String
  role                      Role?      @default(user)
  emailVerified             Boolean    @default(false)
  verificationCode          String?
  verificationCodeExpiresAt String?
  createdAt                 DateTime?  @default(now())
  updatedAt                 DateTime?  @updatedAt
  resetPasswordOtp           String?
  resetPasswordOtpExpires    DateTime?
  courses          Course[]
  payment        Enrollment[]
  stripeCustomerId String?  @unique
}

model Course {
  id        String      @id @default(uuid())
  title    String
  description String
  fileKey String
  price Int
  duration Int
  level CourseLevel @default(Beginner)
  category String
  subDescription String
  slug String @unique
  status CourseStatus @default(Draft)
  stripePriceId   String? 
  
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt
  User       User?   @relation(fields: [userId], references: [id], onDelete:  Cascade)
  userId     String?
  chapters    Chapter[]
  payment        Enrollment[]

  @@map("courses")

}

model Chapter {
  id String     @id @default(uuid())
  title String
  position Int

  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt


  course    Course? @relation(fields: [courseId], references: [id], onDelete:  Cascade)
  courseId String?
  lessons    Lesson[]
}

model Lesson {
  id String @id @default(uuid())
  title String
  description String? 
  position Int
  thumbnailKey String
  videoKey    String

  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt

  
  chapter   Chapter?   @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId String?
}

model Enrollment {
  id String @id @default(uuid())

  amount Int
  status EnrollmentStatus @default(Pending)
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt
    User       User   @relation(fields: [userId], references: [id], onDelete:  Cascade)
  userId     String
  course    Course @relation(fields: [courseId], references: [id], onDelete:  Cascade)
  courseId String

  @@unique([userId, courseId])
}